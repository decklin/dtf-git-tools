#!/bin/bash

# Shows all branches or commits reachable from some ref (or all refs, by
# default) that are not merged to the given ref (master, by default).
#
# Normally, does not show branches that are strictly forward of the ref
# (i.e. in development); To show them, use -f (fast-forwardable branches
# only) or -a (all unmerged branches).
#
# To consider only branches that are reachable from some other ref, use
# -i REF (you probably want to combine this with -a). For example, if
# you have a bunch of topic branches off of master and a development
# branch called next and want to see which topics are merged, use `git
# unmerged -i next -a`.
#
# If -i REF is specified, in addition to branches, all commits reachable
# from that ref that are not reachable from another branch that is
# merged into it will be listed. Commits that have been cherry-picked
# (i.e. have an identical patch-id) are hidden by default; -p will show
# them. To show only branches, use -b; only commits, -c.
#
# bash used for <() syntax only.
#
# LIMITATIONS:
#
# If a commit is cherry-picked to a topic and merged back in, the
# cherry-pick filter won't find it -- only cherry-picks from the
# reference branch are considered duplicates.
#
# If a topic merge is reverted, the commits in the topic still show up.
# Everything reachable from the reverted merge should be ignored.
#
# If a topic keeps going after being merged, but is not merged in again,
# the topic commits show up as individual commits. If they are reachable
# from a merge, we should list something like topic~3 as being merged
# in.

branches() {
    git branch --color=never "$@" | cut -c 3- | sed 's,^remotes/,,'
}

ignore_boring() {
    egrep -v '^master|^oldest|/'
}

local_branches() {
    branches | ignore_boring
}

origin_branches() {
    branches -a | sed -n '/HEAD/d;s@origin/@@p' | ignore_boring
}

branch_branches() {
    merged_branches "$1" | fgrep -vf <(merged_branches "$2") | sed 's@^origin/@@' | ignore_boring | fgrep -v "$1" | sort -u
}

branch_commits() {
    for branch in $(branch_branches "$1" "$2"); do
        git rev-list "$2..$(fallback_to_remote origin "$branch")"
    done
}

merged_branches() {
    branches -a --merged "$1"
}

diverg_size() {
    git rev-list "$1..$2" | wc -l
}

fallback_to_remote() {
    if [ "$(git rev-parse --quiet --verify "$2")" ]; then
        echo "$2"
    else
        echo "$1/$2"
    fi
}

output() {
    if [ "$short_output" ]; then
        echo "$1"
    else
        git --no-pager log -1 --date=short --pretty="format:$(log_fmt "$2")%n" "$1"
    fi
}

list_unmerged() {
    while read b; do
        branch="$(fallback_to_remote origin "$b")"
        ahead="$(diverg_size "$2" "$branch")"
        behind="$(diverg_size "$branch" "$2")"
        if "$1" "$ahead" "$behind"; then
            a="$(printf '%7.7s' "+${ahead##* }")"
            b="$(printf '%7.7s' "-${behind##* }")"
            output "$branch" "%C(blue)$a%C(reset) %C(red)$b%C(reset) %C(green)%ad%C(reset) $branch"
        fi
    done
}

list_other_commits() {
    for commit in $(git rev-list --reverse --no-merges "$2..$1" | fgrep -vf <(branch_commits "$1" "$2")); do
        p="$(printf '%7.7s' "$(git show "$commit" | git patch-id)")"
        output "$commit" "%C(yellow)%h%C(reset) %C(cyan)$p%C(cyan) %C(green)%ad%C(reset) %s"
    done
}

filter_cherry_picks() {
    fgrep -vf <(git log -p "$1~$3..$2" | git patch-id | cut -c 1-7)
}

cmp_all() { test "$1" -gt 0; }
cmp_ffwd() { test "$1" -gt 0 -a "$2" -lt 1; }
cmp_strict() { test "$1" -gt 0 -a "$2" -gt 0; }

if [ -t 1 ]; then
    log_fmt() { echo "$@"; }
else
    log_fmt() { echo "$@" | sed 's/%C([a-z]*)//g'; }
fi

comparator=cmp_strict
show_branches=1
show_commits=1
search_depth=100
while getopts abcd:fi:ops opt; do
    case $opt in
        a) comparator=cmp_all;;
        b) show_branches=1; unset show_commits;;
        c) show_commits=1; unset show_branches;;
        d) search_depth="$OPTARG";;
        f) comparator=cmp_ffwd;;
        i) restrict_to="$OPTARG";;
        p) include_cherry_picks=1;;
        o) origin_only=1;;
        s) short_output=1;;
    esac
done
shift $(($OPTIND - 1))
ref="${1:-master}"

show_branches() {
    if [ "$restrict_to" ]; then
        branch_branches "$restrict_to" "$ref"
    elif [ "$origin_only" ]; then
        origin_branches "$ref"
    else
        local_branches "$ref"
    fi
}

filter_commits() {
    if [ "$include_cherry_picks" ]; then
        cat
    else
        filter_cherry_picks "${restrict_to:-HEAD}" "$ref" "$search_depth"
    fi
}

if [ "$show_branches" ]; then
    show_branches | list_unmerged "$comparator" "$ref"
fi

if [ "$show_commits" ]; then
    list_other_commits "${restrict_to:-HEAD}" "$ref" | filter_commits
fi
